import nltk
from nltk.tokenize import word_tokenize, sent_tokenize
from nltk.corpus import wordnet
from enchant.checker import SpellChecker
import random

# Download required NLTK data (run once)
try:
    nltk.data.find('tokenizers/punkt')
    nltk.data.find('corpora/wordnet')
except LookupError:
    nltk.download('punkt')
    nltk.download('wordnet')

class WritingStyler:
    def __init__(self):
        self.checker = SpellChecker("en_US")
        
    def get_synonyms(self, word):
        """Find synonyms for a given word"""
        synonyms = set()
        for syn in wordnet.synsets(word):
            for lemma in syn.lemmas():
                synonyms.add(lemma.name().replace('_', ' '))
        return list(synonyms)

    def check_spelling(self, text):
        """Check and suggest spelling corrections"""
        self.checker.set_text(text)
        corrections = {}
        for err in self.checker:
            suggestions = err.suggest()
            if suggestions:
                corrections[err.word] = suggestions[0]
        return corrections

    def enhance_sentence(self, sentence):
        """Enhance a sentence with better vocabulary and style"""
        # Tokenize words
        words = word_tokenize(sentence)
        enhanced_words = []
        
        for word in words:
            # Skip punctuation and short words
            if len(word) <= 3 or not word.isalnum():
                enhanced_words.append(word)
                continue
                
            # Get synonyms
            synonyms = self.get_synonyms(word)
            if synonyms:
                # Randomly choose a synonym (25% chance of replacement)
                if random.random() < 0.25:
                    enhanced_words.append(random.choice(synonyms))
                else:
                    enhanced_words.append(word)
            else:
                enhanced_words.append(word)
        
        return ' '.join(enhanced_words)

    def process_text(self, text):
        """Process the full text and provide suggestions"""
        print("\n=== Original Text ===")
        print(text)
        
        # Check spelling
        spelling_corrections = self.check_spelling(text)
        if spelling_corrections:
            print("\n=== Spelling Suggestions ===")
            for wrong, correct in spelling_corrections.items():
                print(f"'{wrong}' could be corrected to '{correct}'")
        
        # Enhance style sentence by sentence
        sentences = sent_tokenize(text)
        enhanced_text = []
        
        print("\n=== Style Enhanced Version ===")
        for sentence in sentences:
            enhanced = self.enhance_sentence(sentence)
            enhanced_text.append(enhanced)
            print(enhanced)
        
        # Provide general writing tips
        print("\n=== Writing Style Tips ===")
        self.provide_tips(text)
        
        return '\n'.join(enhanced_text)

    def provide_tips(self, text):
        """Provide general writing tips based on the text"""
        words = word_tokenize(text.lower())
        sentences = sent_tokenize(text)
        
        # Check for repetition
        word_count = {}
        for word in words:
            if word.isalnum():
                word_count[word] = word_count.get(word, 0) + 1
        
        repeated_words = [w for w, c in word_count.items() if c > 3]
        if repeated_words:
            print("- Try to avoid repeating these words too often:", ', '.join(repeated_words))
        
        # Check sentence length
        avg_length = sum(len(word_tokenize(s)) for s in sentences) / len(sentences)
        if avg_length > 20:
            print("- Consider using shorter sentences for better readability")
        elif avg_length < 10:
            print("- Try combining some sentences for better flow")
        
        print("- Use transition words (e.g., 'however', 'therefore') to connect ideas")
        print("- Vary your sentence beginnings for more engaging writing")

def main():
    styler = WritingStyler()
    
    print("Welcome to the English Writing Style Helper!")
    print("Enter your text (press Enter twice to finish):\n")
    
    # Get multi-line input
    lines = []
    while True:
        line = input()
        if line:
            lines.append(line)
        else:
            if lines:  # If we have some text and hit empty line
                break
            continue
    
    text = ' '.join(lines)
    enhanced_text = styler.process_text(text)

if __name__ == "__main__":
    main( )
